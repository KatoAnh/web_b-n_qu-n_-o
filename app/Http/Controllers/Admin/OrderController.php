<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\Order;
use App\Events\OrderStatusUpdated; // Import s·ª± ki·ªán OrderStatusUpdated
use App\Mail\OrderGiao;
use App\Mail\OrderErrors;
use App\Mail\OrderPicking;
use App\Mail\OrderProcessing;
use App\Mail\OrderShipped;
use Illuminate\Support\Facades\Mail;
use App\Jobs\UpdateOrderStatus;
use App\Mail\OrderCancelledMail;
use App\Models\Stock;

class OrderController extends Controller
{
    public function index(Request $request)
    {
        $query = Order::with('user')->orderBy('id', 'desc');

        // L·ªçc theo status n·∫øu c√≥
        if ($request->filled('status')) {
            $query->where('status', $request->status);
        }

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%") // üëà l·ªçc ƒë√∫ng theo m√£ ƒë∆°n
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(15)->withQueryString(); // Tr·∫£ v·ªÅ danh s√°ch ƒë∆°n h√†ng v·ªõi 10 b·∫£n ghi/trang


        return view('admin.orders.index', compact('orders'));
    }
    public function cancelled(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'cancelled')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.cancelled', compact('orders'));
    }

    public function pending(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'pending')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.pending', compact('orders'));
    }

    public function processing(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'processing')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.processing', compact('orders'));
    }

    public function picking(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'picking')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.picking', compact('orders'));
    }

    public function shipping(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'shipping')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.shipping', compact('orders'));
    }

    public function shipped(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'shipped')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.shipped', compact('orders'));
    }

     public function completed(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'completed')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.completed', compact('orders'));
    }

    public function failed(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'failed')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.failed', compact('orders'));
    }

    public function returning(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'returning')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.returning', compact('orders'));
    }

    public function return_requested(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'return_requested')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.return_requested', compact('orders'));
    }

        public function returned(Request $request)
    {
        $query = Order::with(['user', 'items.variant.product', 'items.variant.color', 'items.variant.size'])
            ->where('status', 'returned')
            ->orderBy('created_at', 'desc');

        // T√¨m ki·∫øm theo t·ª´ kh√≥a (m√£ ƒë∆°n h√†ng, t√™n user, email, s·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng)
        if ($request->filled('search')) {
            $search = $request->search;
            $query->where(function ($q) use ($search) {
                $q->where('order_number', 'like', "%{$search}%")
                    ->orWhere('customer_phone', 'like', "%{$search}%") // Th√™m t√¨m ki·∫øm theo s·ªë ƒëi·ªán tho·∫°i
                    ->orWhereHas('user', function ($q2) use ($search) {
                        $q2->where('name', 'like', "%{$search}%")
                            ->orWhere('email', 'like', "%{$search}%");
                    });
            });
        }

        // L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu (created_at >= from_date)
        if ($request->filled('from_date')) {
            $query->whereDate('created_at', '>=', $request->from_date);
        }

        // L·ªçc theo ng√†y k·∫øt th√∫c (created_at <= to_date)
        if ($request->filled('to_date')) {
            $query->whereDate('created_at', '<=', $request->to_date);
        }

        $orders = $query->paginate(10)->withQueryString();

        return view('admin.orders.returned', compact('orders'));
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng (s·ªë ƒëi·ªán tho·∫°i v√† ƒë·ªãa ch·ªâ giao h√†ng)
     */
    public function changePhoneAddress(Request $request, $id)
    {
        $order = Order::findOrFail($id);

        $validated = $request->validate([ 'customer_phone' => [
            'required',
            'string',
            'regex:/^0[0-9]+$/'
        ],
            'shipping_address' => 'required|string|min:5|max:255',
        ],
            [
                'customer_phone.required' => 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
                
                'customer_phone.regex' => 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë 0, 10 k√≠ t·ª± v√† ch·ªâ ch·ª©a c√°c ch·ªØ s·ªë.',
                
                'shipping_address.required' => 'ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
                'shipping_address.max' => 'ƒê·ªãa ch·ªâ giao h√†ng kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
                'shipping_address.min' => 'ƒê·ªãa ch·ªâ giao h√†ng ph·∫£i √≠t nh·∫•t 5 k√Ω t·ª±.',
            ]
    );

        $order->customer_phone = $validated['customer_phone'];
        $order->shipping_address = $validated['shipping_address'];
        $order->save();
        // G·ª≠i email th√¥ng b√°o c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng
            
        if ($order->customer_email) {
            \Mail::to($order->customer_email)->send(new \App\Mail\OrderCustomerInfoChanged($order));
        }
        
        return redirect()->route('orders.show', $order->id)
            ->with('success', 'C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng th√†nh c√¥ng!');
    }

    public function show(Request $request, $id)
    {
        $order = Order::with([
            'items.variant.product',    // t√™n s·∫£n ph·∫©m
            'items.variant.color',      // m√†u s·∫Øc
            'items.variant.size'        // size
        ])->findOrFail($id);
        $order = Order::findOrFail($id);
    $oldStatus = $order->status;

    // C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng n·∫øu c√≥
    if ($request->has('customer_phone')) {
        $order->customer_phone = $request->input('customer_phone');
    }
    if ($request->has('shipping_address')) {
        $order->shipping_address = $request->input('shipping_address');
    }

        return view('admin.orders.show', compact('order'));
    }
   
    public function updateStatus(Request $request, $id)
    {
        $order = Order::findOrFail($id);
        $newStatus = $request->input('status');
        


        $order->status = $newStatus;

        // N·∫øu tr·∫°ng th√°i l√† ƒë√£ giao h√†ng / ho√†n th√†nh ‚Üí ƒë√°nh d·∫•u ƒë√£ thanh to√°n
        if (in_array($newStatus, ['shipped', 'completed']) && $order->payment_status !== 'paid') {
            $order->payment_status = 'paid';
        }

        $order->save();


        return response()->json(['message' => 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng']);
   }

    public function edit(Request $request, $id)
    {
        $order = Order::findOrFail($id);
        return view('admin.orders.edit', compact('order'));
    }
    public function update(Request $request, $id)
    {
        $order = Order::findOrFail($id);
        $oldStatus = $order->status;
        $order->update($request->all());
        UpdateOrderStatus::dispatch($order->id);

        

       // N·∫øu tr·∫°ng th√°i giao h√†ng l√† "shipped" v√† ch∆∞a thanh to√°n th√¨ t·ª± ƒë·ªông chuy·ªÉn sang "paid"
        if ($order->status === 'shipped' && $order->payment_status !== 'paid') {
            $order->payment_status = 'paid';
            $order->shipped_at = now(); // C·∫≠p nh·∫≠t th·ªùi gian giao h√†ng
            $order->save();

        }
        // N·∫øu tr·∫°ng th√°i thay ƒë·ªïi t·ª´ "shipper_en_route" sang "restocked" th√¨ c·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng kho
        if ($oldStatus === 'shipper_en_route' && $order->status === 'restocked') {
            foreach ($order->items as $item) {
                $stock = \App\Models\Stock::where('product_variant_id', $item->product_variant_id)->first();
                if ($stock) {
                    $stock->quantity += $item->quantity;
                    $stock->save();
                }
            }
        }
        if ($oldStatus === 'failed' && $order->status === 'restocked') {
            foreach ($order->items as $item) {
                $stock = \App\Models\Stock::where('product_variant_id', $item->product_variant_id)->first();
                if ($stock) {
                    $stock->quantity += $item->quantity;
                    $stock->save();
                }
            }
        }

        // N·∫øu tr·∫°ng th√°i thay ƒë·ªïi v√† l√† "cancelled" th√¨ c·ªông l·∫°i s·ªë l∆∞·ª£ng v√†o kho c·ªßa t·ª´ng variant
            if ($order->status === 'cancelled' && $oldStatus !== 'cancelled') {
                foreach ($order->items as $item) {
                    // T√¨m b·∫£n ghi stock c·ªßa variant
                    $stock = \App\Models\Stock::where('product_variant_id', $item->product_variant_id)->first();
                    if ($stock) {
                        $stock->quantity += $item->quantity;
                        $stock->save();
                    }
                }
            }

        if ($order->status !== $oldStatus) {
        \App\Jobs\UpdateOrderStatus::dispatch($order->id);
    }
        return redirect()->route('orders.index', $order->id)->with('success', 'C·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng.');
    }

    public function handleReturn(Request $request, $id)
{
    $order = Order::findOrFail($id);

    $request->validate([
        'action' => 'required|in:accept,reject',
        'note_admin' => 'nullable|string',
    ]);

    $order->note_admin = $request->input('note_admin');

    if ($request->action === 'accept') {
        $order->status = 'returned';
        $order->returned_at = now();
        $order->save();
        Mail::to($order->customer_email)->queue(new \App\Mail\ReturnAccepted($order));
    } else {
        $order->status = 'completed';
        $order->completed_at = now();
        $order->save();
        Mail::to($order->customer_email)->queue(new \App\Mail\ReturnRejected($order));
    }

    return redirect()->route('orders.index', $order->id)
        ->with('success', 'ƒê√£ x·ª≠ l√Ω y√™u c·∫ßu ho√†n h√†ng.');
}

    public function destroy($id)
{
    $order = Order::findOrFail($id);

    // ki·ªÉm tra ƒëi·ªÅu ki·ªán x√≥a
    if ($order->status !== 'completed' || !$order->completed_at || $order->completed_at->addDays(7)->isFuture()) {
        return redirect()->route('orders.index')
            ->with('error', 'Kh√¥ng th·ªÉ x√≥a: ƒë∆°n h√†ng ph·∫£i ·ªü tr·∫°ng th√°i ho√†n th√†nh v√† ƒë√£ qu√° 7 ng√†y k·ªÉ t·ª´ khi ho√†n th√†nh.');
    }

    // (tu·ª≥: n·∫øu d√πng soft delete th√¨ gi·ªØ nh∆∞ n√†y, n·∫øu mu·ªën x√≥a c·ª©ng th√¨ ->forceDelete())
    $order->delete();

    return redirect()->route('orders.index')
        ->with('success', 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.');
}


}


